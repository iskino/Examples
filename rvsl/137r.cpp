/*
Дело в том, что C++ использует «фиктивную переменную» или «фиктивный параметр» для операторов версии постфикс.
Этот фиктивный целочисленный параметр используется только с одной целью: отличить версию постфикс
операторов инкремента/декремента от версии префикс. Перегрузим версии префикс и постфикс операторов
инкремента/декремента в одном классе.
Здесь есть несколько интересных моментов:
  Во-первых, мы разделили версию постфикс от версии префикс использованием целочисленного фиктивного
  параметра в версии постфикс.
  Во-вторых, поскольку фиктивный параметр не используется в реализации самой перегрузки,
  то мы даже не даём ему имя. Таким образом, компилятор будет рассматривать эту переменную
  как простую заглушку (заполнитель места) и даже не будет предупреждать нас, что мы объявили переменную,
  но никогда её не использовали.
  В-третьих, операторы версий префикс и постфикс выполняют одно и то же задание — оба
  увеличивают/уменьшают значение переменной объекта. Разница между ними только в значении, которое они возвращают.

Рассмотрим последний пункт детальнее. Операторы версии префикс возвращают объект после того, как он
был увеличен или уменьшен. В версии постфикс нам нужно возвращать объект до того, как он будет увеличен
или уменьшен. И тут конфуз! Если мы увеличиваем или уменьшаем объект, то мы не можем возвратить его до
выполнения инкремента/декремента, так как операция увеличения/уменьшения уже произошла. С другой стороны,
если мы возвращаем объект до выполнения инкремента/декремента, то сама операция увеличения/уменьшения
объекта не выполниться.

Решение — использовать временный объект с текущим значением переменной-члена.
Тогда можно будет увеличить/уменьшить исходный объект, а возвратить обратно в caller временный объект.
Таким образом, caller получит копию объекта до того, как фактический объект будет увеличен или уменьшен,
и сама операция инкремента/декремента пройдет успешно.
*/
#include <iostream>

class Number
{
private:
    int m_number;
public:
    Number(int number=0)
        : m_number(number)
    {
    }

    Number& operator++(); // версия префикс
    Number& operator--(); // версия префикс

    Number operator++(int); // версия постфикс
    Number operator--(int); // версия постфикс

    friend std::ostream& operator<< (std::ostream &out, const Number &n);
};

Number& Number::operator++()
{
    // Если значением переменной m_number является 8, то выполняем сброс на 0
    if (m_number == 8)
        m_number = 0;
    // в противном случае, просто увеличиваем m_number на единицу
    else
        ++m_number;

    return *this;
}

Number& Number::operator--()
{
    // Если значением переменной m_number является 0, то присваиваем m_number значение 8
    if (m_number == 0)
        m_number = 8;
    // в противном случае, просто уменьшаем m_number на единицу
    else
        --m_number;

    return *this;
}

Number Number::operator++(int)
{
    // Создаем временный объект класса Number с текущим значением переменной m_number
    Number temp(m_number);

    // Используем оператор инкремента версии префикс для реализации перегрузки оператора инкремента версии постфикс
    ++(*this); // реализация перегрузки

    // возвращаем временный объект
    return temp;
}

Number Number::operator--(int)
{
    // Создаем временный объект класса Number с текущим значением переменной m_number
    Number temp(m_number);

    // Используем оператор декремента версии префикс для реализации перегрузки оператора декремента версии постфикс
    --(*this); // реализация перегрузки

    // возвращаем временный объект
    return temp;
}

std::ostream& operator<< (std::ostream &out, const Number &d)
{
	out << d.m_number;
	return out;
}

int main()
{
    Number number(6);

    std::cout << number;
    std::cout << ++number; // вызывается Number::operator++();
    std::cout << number++; // вызывается Number::operator++(int);
    std::cout << number;
    std::cout << --number; // вызывается Number::operator--();
    std::cout << number--; // вызывается Number::operator--(int);
    std::cout << number;

    return 0;
} // Результат: 6778776
