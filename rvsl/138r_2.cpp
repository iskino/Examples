/*
Неконстантная версия будет использоваться с неконстантными объектами, а версия const с объектами const.
Рассмотрим подробнее, как обрабатывается стейтмент array[4] = 5. Поскольку приоритет оператора индексации
выше приоритета оператора присваивания, то сначала выполняется часть array[4]. array[4] приводит
к вызову функции перегрузки оператора [], которая возвратит array.m_array[4].
Поскольку оператор [] использует возврат по ссылке, то он возвращает фактический элемент array.m_array[4].
Наше частично обработанное выражение становится array.m_array[4] = 5, что является
прямой операцией присваивания значения элементу массива.

Любое значение, которое находится слева от оператора присваивания должно 
быть l-value (переменной с адресом памяти). Поскольку результат выполнения оператора [] может использоваться
в левой части операции присваивания (например, array[4] = 5), то возвращаемое значение оператора [] должно быть l-value.
Ссылки же всегда являются l-values, так как их можно использовать только с переменными, которые имеют адреса памяти.
Поэтому, используя возврат по ссылке, компилятор останется доволен, что возвращается l-value и никаких проблем не будет.

Рассмотрим, что произойдет, если оператор [] будет использовать возврат по значению вместо возврата по ссылке.
array[4] приведет к вызову функции перегрузки оператора [], который будет возвращать значение
элемента array.m_array[4] (не индекс, а значение по указанному индексу). Например, если значением m_array[4] является 7,
то выполнение оператора [] приведет к возврату значения 7. array[4] = 5 будет обрабатываться как 7 = 5,
что является бессмысленным! Если вы попытаетесь это сделать, то компилятор выдаст следующую ошибку:

C:VCProjectsTest.cpp(386) : error C2106: '=' : left operand must be l-value
*/
#include <iostream>

class IntArray
{
private:
    int m_array[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; // указываем начальные значения

public:
    int& operator[] (const int index);
    const int& operator[] (const int index) const;
};

int& IntArray::operator[] (const int index) // для неконстантных объектов: может использоваться как для присваивания значений элементам, так и для их просмотра
{
    return m_array[index];
}

const int& IntArray::operator[] (const int index) const // для константных объектов: используется только для просмотра (вывода) элементов массива
{
    return m_array[index];
}

int main()
{
    IntArray array;
    array[4] = 5; // хорошо: вызывается неконстантная версия operator[]
    std::cout << array[4];

    const IntArray carray;
    carray[4] = 5; // ошибка компиляции: вызывается константная версия operator[], которая возвращает константную ссылку. Выполнять операцию присваивания нельзя
    std::cout << carray[4];

    return 0;
}
